(* requires rules from basis.bnf *)

<doc> = (code-block | <text-line>)*

<code-block> = <start-fence> code <end-fence>
<code>       = chunk (<empty-line> chunk)*
chunk        = expressions special-comments?

expressions       = expression-line+
<expression-line> = !special-comments nonempty-text-line

<special-comments> = input? stderr? stdout? (result | no-eval)
input              = <#"(?xms) ^ \h* ;+ \h+ <      \h+"> sc-rest
stderr             = <#"(?xms) ^ \h* ;+ \h+ >>     \h+"> sc-rest
stdout             = <#"(?xms) ^ \h* ;+ \h+ >      \h+"> sc-rest
result             = <#"(?xms) ^ \h* ;+ \h+ =>     \h+"> sc-rest
no-eval            = <#"(?xms) ^ \h* ;+ \h+ [^>=]> \h+"> sc-rest
    (* This might be extended to special meaning checker. *)
<comment-line>     = !(input | stderr | stdout | result) 
                     <#"(?xms) ^ \h* ;+ \h+"> text <linebreak>
<sc-rest>          = text <linebreak> comment-line*

fence-line  = start-fence | end-fence
start-fence = #"(?xms) ^ \h* ```clojure $" linebreak
end-fence   = #"(?xms) ^ \h* ``` $" linebreak

<text-line>          = !fence-line #"(?xms) ^ .*? $" <linebreak>
<nonempty-text-line> = !empty-line text-line
empty-line           = #"(?xms) ^$" linebreak
<text>               = #"(?xms) .*? $"
linebreak            = #"(?xms) \R"
